<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZFly&#39;s Blog</title>
  
  <subtitle>Blog site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.zfly.me/"/>
  <updated>2017-11-03T06:38:15.004Z</updated>
  <id>https://blog.zfly.me/</id>
  
  <author>
    <name>Pengfei Zhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx 使用 let&#39;s encrypt 配置https</title>
    <link href="https://blog.zfly.me/2016/04/use-letencrypt-to-configure-https.html"/>
    <id>https://blog.zfly.me/2016/04/use-letencrypt-to-configure-https.html</id>
    <published>2016-04-02T15:44:34.000Z</published>
    <updated>2017-11-03T06:38:15.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文中使用的linux为debian8，nginx为最新版（1.9.9）<br>注：nginx自1.9.5后才默认包含http2模块，所以如果要开启http2需要使用1.9.5以上版本。</p><h2 id="2016年6月30日更新"><a href="#2016年6月30日更新" class="headerlink" title="2016年6月30日更新"></a>2016年6月30日更新</h2><pre><code>注意现在let&apos;s Encrypt客户端已经改名，命令名称稍有变化，参数不变。</code></pre><a id="more"></a><h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p>我采用的是通过<code>apt</code>进行安装，我们按照 <a href="http://nginx.org/en/linux_packages.html" title="nginx安装文档" target="_blank" rel="external">nginx官方文档</a> 中的教程进行操作。<br>我将其中对于debian系统的操作步骤单独截图出来，并附带图中的”<a href="http://nginx.org/keys/nginx_signing.key" title="nginx key" target="_blank" rel="external">this key</a>“的链接。</p><p><img src="/assets/images/20160201135825676.png" alt="nginx官方安装步骤截图" title="nginx官方安装步骤截图"></p><h2 id="1-为第三方源添加添加受信任的key"><a href="#1-为第三方源添加添加受信任的key" class="headerlink" title="1. 为第三方源添加添加受信任的key"></a>1. 为第三方源添加添加受信任的key</h2><p>当添加第三方源时，需要为系统添加对应的密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sL http://nginx.org/keys/nginx_signing.key | sudo -E apt-key add -</div></pre></td></tr></table></figure><h2 id="2-添加apt源列表"><a href="#2-添加apt源列表" class="headerlink" title="2.  添加apt源列表"></a>2.  添加apt源列表</h2><p>编辑<code>/etc/apt/source.list</code>文件，在其中添加以下内容。<br>也可以选择在<code>/etc/apt/source.list.d/</code>目前下新建<code>*.list</code>文件，并添加以下内容。</p><pre><code>deb http://nginx.org/packages/mainline/debian/ jessie nginxdeb-src http://nginx.org/packages/mainline/debian/ jessie nginx</code></pre><h2 id="3-更新apt软件列表，然后安装nginx"><a href="#3-更新apt软件列表，然后安装nginx" class="headerlink" title="3. 更新apt软件列表，然后安装nginx"></a>3. 更新apt软件列表，然后安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo aptitude update &amp;&amp; sudo aptitude install nginx</div></pre></td></tr></table></figure><h1 id="使用let’s-Encrypt程序生成证书"><a href="#使用let’s-Encrypt程序生成证书" class="headerlink" title="使用let’s Encrypt程序生成证书"></a>使用let’s Encrypt程序生成证书</h1><h2 id="下载let’s-Encrypt程序。"><a href="#下载let’s-Encrypt程序。" class="headerlink" title="下载let’s Encrypt程序。"></a>下载let’s Encrypt程序。</h2><p><a href="https://github.com/letsencrypt/letsencrypt" title="let&#39;s Encrypt" target="_blank" rel="external">let’sEncrypt项目</a>发布在github上，所以需要安装git工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo aptitude install git</div><div class="line">git <span class="built_in">clone</span> https://github.com/letsencrypt/letsencrypt.git</div></pre></td></tr></table></figure></p><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><p>当运行let’sEncrypt程序时，程序会自动编译项目处理依赖关系，所以只需要进入程序目录，执行auto脚本即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> letsencrypt</div><div class="line">sudo ./letsencrypt-auto --<span class="built_in">help</span> all</div></pre></td></tr></table></figure></p><p>甚至最后那句可以直接这样指定程序参数，然后当项目编译完成后就会弹窗要求你填写相关信息，然后变自动生成了网站的证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 目前（2016年4月2日）let'sEncrypt还不支持nginx自动生成程序。</span></div><div class="line"><span class="comment"># 所以需要先停止nginx服务器，然后使用standalone参数生成证书。</span></div><div class="line">sudo service nginx stop</div><div class="line">sudo ./letsencrypt-auto certonly --standalone</div></pre></td></tr></table></figure><p>生成的证书会存放在<code>/etc/letsencrypt/live/{domain}/</code>下<br>nginx 中用到的是<code>fullchain.pem</code> 和 <code>privkey.pem</code> 其他为apache使用的证书。</p><h1 id="nginx配置https"><a href="#nginx配置https" class="headerlink" title="nginx配置https"></a>nginx配置https</h1><p>Mozilla 有一个<a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/" title="Mozilla SSL Configuration Generator" target="_blank" rel="external">协助生成SSL配置的页面</a>各位可以尝试使用</p><p> 这一段直接贴我的配置吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    #nginx 监听端口，443为默认https端口，ssl指使用https，http2为开启http2</div><div class="line">    listen                  443 ssl http2;</div><div class="line">    # 服务器名称</div><div class="line">    server_name             example.org;</div><div class="line"></div><div class="line">    # 网站根目录 和 无后缀时默认查找文件</div><div class="line">    root                    /var/www/;</div><div class="line">    index                   index.html;</div><div class="line"></div><div class="line">    # 开启 ssl （其实实际是tls）</div><div class="line">    ssl                     on;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    # 支持的加密协议</div><div class="line">    ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    # 支持的加密套件</div><div class="line">    ssl_ciphers             HIGH:!RC4:!3DES:!aDSS:!aNULL:!kPSK:!kSRP:!MD5:@STRENGTH:+SHA1:+kRSA;</div><div class="line">    # 定义session缓存大小</div><div class="line">    ssl_session_cache       shared:TLSSL:16m;</div><div class="line">    # 定义session过期时间</div><div class="line">    ssl_session_timeout     10m;</div><div class="line">    # https证书公钥</div><div class="line">    ssl_certificate         /etc/letsencrypt/live/example.org/fullchain.pem;</div><div class="line">    # https证书私钥 要注意保存！</div><div class="line">    ssl_certificate_key     /etc/letsencrypt/live/example.org/privkey.pem;</div><div class="line">    # nginx默认会使用Diffiel-Hellman交换密钥是1024位的，相对不安全，所以需要替换使用更安全的。</div><div class="line">    #使用 openssl dhparam -out dh4096.pem 4096 可以生成，然后我将其与网站证书的密钥放到了一起</div><div class="line">    ssl_dhparam             /etc/letsencrypt/live/example.org/dh4096.pem;</div><div class="line"></div><div class="line">    # 禁止被外站frame嵌入引用</div><div class="line">    add_header X-Frame-Options SAMEORIGIN;</div><div class="line">    # 为响应头添加要求浏览器使用https重定向的 header</div><div class="line">    add_header Strict-Transport-Security max-age=16000000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文中使用的linux为debian8，nginx为最新版（1.9.9）&lt;br&gt;注：nginx自1.9.5后才默认包含http2模块，所以如果要开启http2需要使用1.9.5以上版本。&lt;/p&gt;
&lt;h2 id=&quot;2016年6月30日更新&quot;&gt;&lt;a href=&quot;#2016年6月30日更新&quot; class=&quot;headerlink&quot; title=&quot;2016年6月30日更新&quot;&gt;&lt;/a&gt;2016年6月30日更新&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;注意现在let&amp;apos;s Encrypt客户端已经改名，命令名称稍有变化，参数不变。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Operations" scheme="https://blog.zfly.me/categories/Operations/"/>
    
    
      <category term="linux" scheme="https://blog.zfly.me/tags/linux/"/>
    
      <category term="debian8" scheme="https://blog.zfly.me/tags/debian8/"/>
    
      <category term="nginx" scheme="https://blog.zfly.me/tags/nginx/"/>
    
      <category term="let&#39;s encrypt" scheme="https://blog.zfly.me/tags/let-s-encrypt/"/>
    
  </entry>
  
  <entry>
    <title>Greenfoot游戏——推箱子</title>
    <link href="https://blog.zfly.me/2016/01/greenfoot-game-sokoban.html"/>
    <id>https://blog.zfly.me/2016/01/greenfoot-game-sokoban.html</id>
    <published>2016-01-09T04:03:15.000Z</published>
    <updated>2017-11-03T06:38:15.004Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>作为一个新人，第一次写博客，文章的调理以及结构可能不够清晰，如果有哪里说的不清楚欢迎各位提醒我。</em></strong></p><p><em>本应用内的<strong>素材剽窃于</strong>此<a href="http://download.csdn.net/download/zpf124/9396945" title="素材来源的html5游戏" target="_blank" rel="external">html5 游戏</a>中，写此文前未得到原作者授权允许，如果涉及侵权，烦劳原作者联系我，立即删除。</em><br><a href="http://blog.csdn.net/lufy_legend/article/details/8607933" target="_blank" rel="external">http://blog.csdn.net/lufy_legend/article/details/8607933</a></p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Greenfoot</code>： Greenfoot是一个基于java的小型框架，可以简易的实现基于GUI界面的游戏应用，所以一般被当作是Java教学用的软件框架。<br><a href="http://www.greenfoot.org/" title="官方网站" target="_blank" rel="external">官方网站</a> <a href="http://www.greenfoot.org/files/translations/Chinese/API/" title="中文API" target="_blank" rel="external">中文API</a> (为2.5版本，略旧最新API为3.0)</p><p><code>注意</code>：虽然Greenfoot一般是被当作学习Java用的练习框架/工具，但请先掌握基本的<code>Java语法</code>后再来阅读本文。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>好了终于要是真正制作这个推箱子的游戏了。在此之前需要先准备好相应的素材,各位可以直接从我上传的 <a href="/assets/files/Sokoban.gfar" title="推箱子源代码">源代码</a> 中提取。</p><h2 id="构思基本结构"><a href="#构思基本结构" class="headerlink" title="构思基本结构"></a>构思基本结构</h2><p>首先，我们要想清楚，我们这个游戏大概需要哪些东西。</p><ul><li>地图：我们的游戏不能只有一关，所以我们需要想办法记录每一关的地图数据。</li><li>可操作的人物：游戏自然要有个我们可以操作的对象。</li><li>箱子：既然是推箱子的游戏必然不能少箱子。</li><li>目标地：箱子需要推到指定的目标点。</li><li>障碍物：我们需要一些障碍物来限制人物的运动。</li></ul><p>之后我们先把这几个类建立好了。</p><p><img src="/assets/images/20160102223628753.png" alt="项目基本结构" title="项目基本结构"></p><p>其中为了美观，我专门单独做了一个地板<code>Floor</code>，不做采用地图背景色也是可行的。</p><p>在这之前我们需要先规定好一个基本的世界类。<br>我们的图片都是48<em>48的所以世界的单位长度最好直接设置成48（像素）。<br>宽高呢这时可以随意指定的，我这里指定为宽<code>11</code>高<code>9</code>，现在世界就是一个由 11</em>9 个边长为 48像素 的小格子拼起来的。<br>所以我GameWorld代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameWorld</span> <span class="keyword">extends</span> <span class="title">World</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameWorld</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;    </div><div class="line">        <span class="keyword">super</span>(<span class="number">11</span>, <span class="number">9</span>, <span class="number">48</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="制作存储地图的类"><a href="#制作存储地图的类" class="headerlink" title="制作存储地图的类"></a>制作存储地图的类</h2><p>对地图的储存我选择使用一个二维数组来存储一个关卡。</p><p>像这样 map中包含 9 个一维数组，每个一维数组里有 11 个数字，二维数组里的每个数字对应一个游戏界面上的点。<br>当然，如果你上面设定的世界宽高和我不一样的，那么这里也要进行对应的变化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[][] map = &#123;</div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">    &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>但是，我们的游戏不能只有一关吧，所以我们需要在来一个数组将多个地图存起来。</p><pre><code>private static List&lt;int[][]&gt; maps;</code></pre><p>为了以后的扩展，方便给，我这里选中使用java.util.List类来存地图数据，继续用数组也是可以的。</p><p>然后我选择在静态代码块中初始化数据，这样当类初次加载的时候数据就会存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    maps = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[][]&gt;();</div><div class="line">    </div><div class="line">    maps.add(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;,  </div><div class="line">        &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;  </div><div class="line">    &#125;);</div><div class="line">    .......</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>你会发现，咦？那个数组里存的数字怎么有好几种啊，都是什么意思啊？<br>在这里，我提前定义好了不同的类型去表示不同的物体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_EMPTY = -<span class="number">1</span>;                <span class="comment">// 空白</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_FLOOR = <span class="number">0</span>;                 <span class="comment">// 地板</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_WAll = <span class="number">1</span>;                  <span class="comment">// 墙壁</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_BOX = <span class="number">2</span>;                   <span class="comment">// 箱子</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_PERSON = <span class="number">3</span>;                <span class="comment">// 人物</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_TARGET = <span class="number">4</span>;                <span class="comment">// 目标点（可与箱子或者人重合，以加和表示）</span></div></pre></td></tr></table></figure><p>这回你知道这些数字代表什么意思了吧，那我需要提问了<strong>最上面那个数组里的6代表什么呢</strong>？</p><p>对，如果你仔细看过上面几行你就会明白6代表4+2也就是箱子和目标点都存在一个位置上。</p><p>接下来我们需要制作一个读取地图方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 方法需要传入一个world指定的数据要加载到那个world上，以及一个levle表示要加载的关卡。</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> world 需要加载数据的world</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> level 指定加载的关卡</span></div><div class="line"><span class="comment">    */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadMap</span><span class="params">(World world, <span class="keyword">int</span> level)</span></span>&#123;</div><div class="line">       <span class="keyword">int</span>[][] map = maps.get(level);</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.length; i++) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map[i].length; j++) &#123;</div><div class="line">            <span class="comment">// 不论这个位置是什么，只要不是空白就需要铺一个地板</span></div><div class="line">               <span class="keyword">if</span>(map[i][j] != MapData.TYPE_EMPTY)&#123;</div><div class="line">                   world.addObject(<span class="keyword">new</span> Floor(), j, i);</div><div class="line">               &#125;</div><div class="line">               <span class="comment">// 根据不同的类型创建不同的物体</span></div><div class="line">               <span class="keyword">switch</span> (map[i][j]) &#123;</div><div class="line">                   <span class="keyword">case</span> MapData.TYPE_WAll:</div><div class="line">                       world.addObject(<span class="keyword">new</span> Wall(), j, i);</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MapData.TYPE_BOX:</div><div class="line">                       world.addObject(<span class="keyword">new</span> Box(), j, i);</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MapData.TYPE_TARGET:</div><div class="line">                       world.addObject(<span class="keyword">new</span> Target(), j, i);</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MapData.TYPE_PERSON:</div><div class="line">                    <span class="comment">// 此处为了保证一个地图上只有一个可控制对象，使用单例，具体内容我们到person中再讲</span></div><div class="line">                       world.addObject(Person.getInstance(), j, i);</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MapData.TYPE_BOX +  MapData.TYPE_TARGET:</div><div class="line">                       world.addObject(<span class="keyword">new</span> Box(), j, i);</div><div class="line">                       world.addObject(<span class="keyword">new</span> Target(), j, i);</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   <span class="keyword">case</span> MapData.TYPE_PERSON +  MapData.TYPE_TARGET:</div><div class="line">                       world.addObject(Person.getInstance(), j, i);</div><div class="line">                       world.addObject(<span class="keyword">new</span> Target(), j, i);</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>这样地图类就基本完成了。后续内容稍后更新….。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;作为一个新人，第一次写博客，文章的调理以及结构可能不够清晰，如果有哪里说的不清楚欢迎各位提醒我。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本应用内的&lt;strong&gt;素材剽窃于&lt;/strong&gt;此&lt;a href=&quot;http://download.csdn.net/download/zpf124/9396945&quot; title=&quot;素材来源的html5游戏&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html5 游戏&lt;/a&gt;中，写此文前未得到原作者授权允许，如果涉及侵权，烦劳原作者联系我，立即删除。&lt;/em&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/lufy_legend/article/details/8607933&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/lufy_legend/article/details/8607933&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Greenfoot&lt;/code&gt;： Greenfoot是一个基于java的小型框架，可以简易的实现基于GUI界面的游戏应用，所以一般被当作是Java教学用的软件框架。&lt;br&gt;&lt;a href=&quot;http://www.greenfoot.org/&quot; title=&quot;官方网站&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方网站&lt;/a&gt; &lt;a href=&quot;http://www.greenfoot.org/files/translations/Chinese/API/&quot; title=&quot;中文API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文API&lt;/a&gt; (为2.5版本，略旧最新API为3.0)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;：虽然Greenfoot一般是被当作学习Java用的练习框架/工具，但请先掌握基本的&lt;code&gt;Java语法&lt;/code&gt;后再来阅读本文。&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="https://blog.zfly.me/categories/Development/"/>
    
      <category term="Java" scheme="https://blog.zfly.me/categories/Development/Java/"/>
    
    
      <category term="Java" scheme="https://blog.zfly.me/tags/Java/"/>
    
      <category term="Game" scheme="https://blog.zfly.me/tags/Game/"/>
    
      <category term="Greenfoot" scheme="https://blog.zfly.me/tags/Greenfoot/"/>
    
  </entry>
  
</feed>
